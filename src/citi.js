var util = require('util'), _ = require('underscore'), request = require('request'), cheerio = require('cheerio'), VError = require('verror');
var Citi = (function () {
    function Citi(clientId, token, server, port, timeout) {
        this.clientId = clientId;
        this.token = token;
        this.server = server;
        this.port = port;
        this.timeout = timeout;
        //path: {corporate: string = '/corporatepayments/v1/'};
        this.path = '/corporatepayments/v1/';
        this.server = server || 'https://citimobilechallenge.anypresenceapp.com';
        this.port = port || 443;
        this.timeout = timeout || 20000;
    }
    Citi.prototype.executeRequest = function (method, action, queryString, body, callback) {
        var functionName = 'Citi.executeRequest';
        var url = this.server + ':' + this.port + this.path + action;
        var requestDesc = util.format('%s request to url %s with query string %s and body %s', method, url, JSON.stringify(queryString), JSON.stringify(body));
        if (method != 'login' && !this.token) {
            var error = new VError('%s failed %s as token is null. You need to login before calling this API', functionName, requestDesc);
            return callback(error, null);
        }
        var options = {
            url: url,
            auth: { 'bearer': this.token },
            method: method,
            qs: queryString,
            headers: { "User-Agent": "Citi Mobile Challenge Javascript API Client" },
            timeout: this.timeout,
            json: body };
        request(options, function (err, response, data) {
            var error = null; // default to no errors
            if (err) {
                error = new VError(err, '%s failed %s', functionName, requestDesc);
                error.name = err.code;
            }
            else if (response.statusCode != 200) {
                error = new VError(err, '%s failed %s, HTTP status code %s', functionName, requestDesc, response.statusCode);
                error.name = response.statusCode;
            }
            else if (!_.isObject(data)) {
                //TODO: remove this hack as request should be parsing the body of the response into a Javascript object
                // try and JSON parse it even though request should have done this
                try {
                    var json = JSON.parse(data);
                    return callback(null, json);
                }
                catch (e) {
                    error = new VError(err, '%s could not JSON parse response body from %s\nResponse body: %s', functionName, requestDesc, data);
                }
                // try and parse HTML body form response
                var $ = cheerio.load(data);
                var responseBody = $('body').text();
                if (responseBody) {
                    error = new VError(err, '%s could not parse response body from %s\nResponse body: %s', functionName, requestDesc, responseBody);
                    error.name = responseBody;
                }
                else {
                    error = new VError(err, '%s could not parse json or HTML response from %s', functionName, requestDesc);
                }
            }
            callback(error, data);
        });
    };
    Citi.prototype.login = function (username, password, callback) {
        this.executeRequest('POST', 'login', 
        // query string
        { client_id: this.clientId }, 
        // body
        {
            "username": username,
            "password": password
        }, function (err, data) {
            if (data && data.token) {
                this.token = data.token;
            }
            callback(err, this.token);
        });
    };
    Citi.prototype.getCorporateAccounts = function (callback) {
        this.executeRequest('GET', 'accounts', { client_id: this.clientId }, null, callback);
    };
    Citi.prototype.addCorporatePayment = function (callback, newPayment) {
        this.executeRequest('POST', 'payments', { client_id: this.clientId }, newPayment, callback);
    };
    Citi.prototype.getCorporatePayments = function (callback, limit, offset) {
        var queryString = { client_id: this.clientId };
        if (limit) {
            queryString.limit = limit;
        }
        if (offset) {
            queryString.offset = offset;
        }
        this.executeRequest('GET', 'payments', queryString, null, callback);
    };
    return Citi;
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Citi;
//# sourceMappingURL=data:application/json;base64,